import java.util.Scanner;

public class TBC {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int rows = scanner.nextInt();
        int columns = scanner.nextInt();
        scanner.nextLine(); // Consume the remaining newline

        char[][] cityMap = new char[rows][columns];

        // Read the city map
        for (int i = 0; i < rows; i++) {
            String line = scanner.nextLine();
            for (int j = 0; j < columns; j++) {
                cityMap[i][j] = line.charAt(j);
            }
        }

        int connectedTunnels = countConnectedTunnels(cityMap);
        System.out.println(connectedTunnels);
    }

    private static int countConnectedTunnels(char[][] cityMap) {
        int rows = cityMap.length;
        int columns = cityMap[0].length;
        boolean[][] visited = new boolean[rows][columns];
        int count = 0;

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                if (cityMap[i][j] == 't' && !visited[i][j]) {
                    dfs(cityMap, visited, i, j);
                    count++;
                }
            }
        }

        return count;
    }

    private static void dfs(char[][] cityMap, boolean[][] visited, int row, int col) {
        int rows = cityMap.length;
        int columns = cityMap[0].length;

        if (row < 0 || row >= rows || col < 0 || col >= columns || visited[row][col] || cityMap[row][col] != 't') {
            return;
        }

        visited[row][col] = true;

        // Recursively visit the adjacent cells
        dfs(cityMap, visited, row - 1, col); // Up
        dfs(cityMap, visited, row + 1, col); // Down
        dfs(cityMap, visited, row, col - 1); // Left
        dfs(cityMap, visited, row, col + 1); // Right
        dfs(cityMap, visited, row - 1, col - 1); // Diagonal: Up-Left
        dfs(cityMap, visited, row - 1, col + 1); // Diagonal: Up-Right
        dfs(cityMap, visited, row + 1, col - 1); // Diagonal: Down-Left
        dfs(cityMap, visited, row + 1, col + 1); // Diagonal: Down-Right
    }
}
